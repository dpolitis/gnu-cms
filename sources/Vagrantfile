# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.
  
  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.define :auctions_srv do |auctions_srv|
    auctions_srv.vm.box = "centos/7"
    auctions_srv.vm.network :public_network,
      :dev => "virbr0",
      :mode => "bridge",
      :type => "bridge"
  end

  if Vagrant.has_plugin?("vagrant-cachier")
    # Configure cached packages to be shared between instances of the same base box.
    # More info on the "Usage" link above
    config.cache.scope = :box
  end

  config.vm.hostname = "auctions"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network", bridge: "eth0"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data" 
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.synced_folder "www", "/var/www", type: "rsync",
   rsync__args: [
     "--verbose", "--archive", "-z", "--copy-links", "-A", "--delete-before"
   ],
  rsync__auto: true
  config.vm.synced_folder "sites", "/etc/httpd/conf.d", type: "rsync",
   rsync__args: [
     "--verbose", "--archive", "-z", "--copy-links", "-A", "--update"
   ],
  rsync__auto: true

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
     yum install -y epel-release 
     yum install -y policycoreutils-python httpd mariadb-server php php-common php-mysql php-gd php-mcrypt php-soap
     yum update -y
     timedatectl set-timezone Europe/Athens
     sed -i 's/;date.timezone =/date.timezone = Europe\/Athens/g' /etc/php.ini
     systemctl enable httpd
     cp /var/www/html/auctions/contrib/ioncube_loader_lin_5.4.so /usr/lib64/php/modules/
     chmod 755 /usr/lib64/php/modules/ioncube_loader_lin_5.4.so
     cp /var/www/html/auctions/contrib/ioncube.ini /etc/php.d/
     systemctl enable mariadb
     mysql_install_db
     chown -R mysql:mysql /var/lib/mysql
     systemctl start mariadb
     mysql -u root < /var/www/html/auctions/contrib/auctions.sql
     mysql -u root -e "CREATE USER 'auctions'@'localhost' IDENTIFIED BY 'pass';"
     mysql -u root -e "GRANT ALL PRIVILEGES ON auctions.* TO 'auctions'@'localhost';"
     mysql -u root -e "FLUSH PRIVILEGES;"
     mysql -u root -e "SET PASSWORD FOR 'root'@'localhost' = PASSWORD('pass');"
     sed -i 's/index.html/index.html index.php/g' /etc/httpd/conf/httpd.conf
     systemctl enable firewalld.service
     systemctl start firewalld.service
     firewall-cmd --zone=public --permanent --add-service=http
     firewall-cmd --reload
  SHELL
  config.vm.provision "shell",
     run: "always",
     inline: <<-SHELL
     chown -R root:apache /var/www/html/auctions
     /bin/sh /var/www/html/auctions/contrib/fix_permissions.sh >/dev/null 2>&1
     restorecon -Rv /etc/httpd/conf.d
     systemctl restart httpd
  SHELL
end
